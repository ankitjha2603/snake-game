console.log("this is script of snake game");
let dimention = 30;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                           Http request                                                                                 //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var url = new URL(window.location.href);
let d = url.searchParams.get("d") * 1
if (d && d < 50 && d > 20) {
    dimention = d;
}
else if (d) {
    alert("Dimention must be <50 and >20")
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                         imp veriable                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
let inputDir = { x: 0, y: 0 };
let iniV = (dimention > 10 & dimention <= 20) * 5 + (dimention > 20) * 20
let rate = 2;
let limit = (dimention > 10 & dimention <= 20) * 20 + (dimention > 20) * 40;
let lastPaintTime = 0;
let speed = iniV;
let snakeArr = [{ x: Math.round(2 + (dimention - 3) * Math.random()), y: Math.round(2 + (dimention - 3) * Math.random()) },];
let food = { x: Math.round(2 + (dimention - 3) * Math.random()), y: Math.round(2 + (dimention - 3) * Math.random()) };
let score = 0;
let initTime = null;
let stage = 0;
let count = 0;
let eaten = false;
let lastTimeEaten = 0;
let gameStatus = "pause"
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                              managing localstorage                                                                              //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
highScoreValue = JSON.parse(localStorage.getItem(`highScore-${dimention}`));
if (localStorage.getItem(`highScore-${dimention}`) === null) {
    localStorage.setItem(`highScore-${dimention}`, "[0]");
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                   board dimention                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
board.style.gridTemplateColumns = `repeat(${dimention}, 1fr)`;
board.style.gridTemplateRows = `repeat(${dimention}, 1fr)`;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                             importing music                                                                         //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const foodSound = new Audio('assets/music/food.mp3');
const gameOverSound = new Audio('assets/music/gameover.mp3');
const moveSound = new Audio('assets/music/move.mp3');
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                         important function                                                                          //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// this return the value of x and y co-ordinates of head taking into account that the when that when the block enters inside a wall, it comes out from the opposite wall
function crossWall(x) { return dimention * (x <= 0) + (x > 0 && x <= dimention) * x + (x > dimention); }
function checkDir(dir) {
    isMove = true
    if (snakeArr.length !== 1) {
        if (crossWall(snakeArr[0].x + dir.x) == snakeArr[1].x && crossWall(snakeArr[0].y + dir.y) == snakeArr[1].y) {
            isMove = false;
        }
    }
    return isMove;
}
//check the presence of element in gievn list and return true or false
function isInList(element, list = snakeArr) {
    let isIn = false;
    for (let i = 1; i < snakeArr.length; i++) {
        if (JSON.stringify(list[i]) === JSON.stringify(element)) {
            isIn = true;
            break;
        }
    }
    return isIn
}
//this funtion is to get highscore from localstorage or to change the value of highscore in localstorage
function getScore(isReturn = true, score = null) {
    if (isReturn) {
        highScoreValue = JSON.parse(localStorage.getItem(`highScore-${dimention}`));
        return highScoreValue[0];
    }
    else {
        highScoreValue = `[${score}]`
        localStorage.setItem(`highScore-${dimention}`, highScoreValue);
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                         main function                                                                                 //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function main(ctime) {
    window.requestAnimationFrame(main);
    if (eaten || gameStatus === "pause") {
        lastTimeEaten = ctime;
        eaten = false;
    }
    if ((ctime - lastTimeEaten) / 1000 >= dimention) {
        lastTimeEaten = ctime;
        food = { x: Math.round(2 + (dimention - 3) * Math.random()), y: Math.round(2 + (dimention - 3) * Math.random()) };
        score -= speed;
        select("#score").innerHTML = "Score : " + score;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if ((ctime - lastPaintTime) / 1000 < 1 / speed) {
        return;
    }
    lastPaintTime = ctime;
    gameEngine();
}
function gameEngine() {
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                setting highscore,stage,speed ,level                               //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    select(`#highScore`).innerHTML = "highScore : " + getScore(true);
    level.innerHTML = `Level : ${stage}`
    stage = Math.round(count / 5);
    speed = iniV + stage * rate;
    speed = speed * (speed <= limit) + limit * (speed > limit)
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                   eating food                                                  //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if (JSON.stringify(snakeArr[0]) === JSON.stringify(food)) {
        foodSound.play();
        score += speed;
        count += 1;
        eaten = true;
        if (getScore(true) <= score) {
            getScore(false, score);
            select("#highScore").innerHTML = "highScore : " + getScore(true);
        }
        select("#score").innerHTML = "Score : " + score;
        snakeArr.unshift({ x: snakeArr[0].x + inputDir.x, y: snakeArr[0].y + inputDir.y });
        while (isInList(food)) {
            food = { x: Math.round(2 + (dimention - 3) * Math.random()), y: Math.round(2 + (dimention - 3) * Math.random()) };
        }
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                               moving the snake                                            //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if (gameStatus === "process") {
        snakeArr.unshift({ x: crossWall(snakeArr[0].x + inputDir.x), y: crossWall(snakeArr[0].y + inputDir.y) })
        snakeArr = snakeArr.slice(0, snakeArr.length - 1)
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                    game over                                                  //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if (isInList(snakeArr[0], snakeArr.slice(1))) {
        gameOverSound.play();
        alert("Game over. Press enter to play again");
        snakeArr = [{ x: Math.round(2 + (dimention - 3) * Math.random()), y: Math.round(2 + (dimention - 3) * Math.random()) }];
        inputDir = { x: 0, y: 0 };
        score = 0;
        count = 0;
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                              refleshing the page                                           //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    board.innerHTML = "";
    snakeArr.forEach((e, index) => {
        snakeElement = newElement('div');
        snakeElement.style.gridRowStart = e.y;
        snakeElement.style.gridColumnStart = e.x;
        if (index === 0) { snakeElement.classList.add('head'); }
        else { snakeElement.classList.add("snake"); }
        board.appendChild(snakeElement);
    })
    foodElement = document.createElement('div');
    foodElement.style.gridRowStart = food.y;
    foodElement.style.gridColumnStart = food.x;
    foodElement.classList.add("food");
    board.appendChild(foodElement);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
window.requestAnimationFrame(main);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                   add event listener to button                                                                  //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
window.addEventListener('keydown', e => {
    //start the game
    if ([65, 83, 68, 87, 37, 38, 39, 40].includes(e.keyCode)) {
        gameStatus = "process"
        select("#score").innerHTML = "Score : " + score;
        if ([65, 37].includes(e.keyCode)) { tempInputDir = { x: -1, y: 0 }; }
        else if ([68, 39].includes(e.keyCode)) { tempInputDir = { x: 1, y: 0 }; }
        else if ([87, 38].includes(e.keyCode)) { tempInputDir = { x: 0, y: -1 }; }
        else if ([83, 40].includes(e.keyCode)) { tempInputDir = { x: 0, y: 1 }; }
        if (checkDir(tempInputDir)) { inputDir = tempInputDir; }
    }
    else if (([32, 80].includes(e.keyCode))) { gameStatus = "pause" }
})
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////